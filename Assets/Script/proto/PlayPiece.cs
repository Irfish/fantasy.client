// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: play_piece.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Pb {

  /// <summary>Holder for reflection information generated from play_piece.proto</summary>
  public static partial class PlayPieceReflection {

    #region Descriptor
    /// <summary>File descriptor for play_piece.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PlayPieceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBwbGF5X3BpZWNlLnByb3RvEgJwYiJFCgxDdHNQbGF5UGllY2USDgoGcm9v",
            "bUlkGAEgASgDEg8KB2NoYWlySWQYAiABKAUSCQoBeBgDIAEoBRIJCgF5GAQg",
            "ASgFIkUKDFN0Y1BsYXlQaWVjZRIOCgZyb29tSWQYASABKAMSDwoHY2hhaXJJ",
            "ZBgCIAEoBRIJCgF4GAMgASgFEgkKAXkYBCABKAUiTQoNU3RjR2FtZVJlc3Vs",
            "dBIOCgZ3aW5uZXIYASABKAUSDgoGbG9vc2VyGAIgASgFEhwKCXBpZWNlTGlz",
            "dBgDIAMoCzIJLnBiLlBpZWNlIiwKBVBpZWNlEg0KBXZhbHVlGAEgASgFEgkK",
            "AXgYAiABKAUSCQoBeRgDIAEoBWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.CtsPlayPiece), global::Pb.CtsPlayPiece.Parser, new[]{ "RoomId", "ChairId", "X", "Y" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.StcPlayPiece), global::Pb.StcPlayPiece.Parser, new[]{ "RoomId", "ChairId", "X", "Y" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.StcGameResult), global::Pb.StcGameResult.Parser, new[]{ "Winner", "Looser", "PieceList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.Piece), global::Pb.Piece.Parser, new[]{ "Value", "X", "Y" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class CtsPlayPiece : pb::IMessage<CtsPlayPiece> {
    private static readonly pb::MessageParser<CtsPlayPiece> _parser = new pb::MessageParser<CtsPlayPiece>(() => new CtsPlayPiece());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CtsPlayPiece> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.PlayPieceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CtsPlayPiece() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CtsPlayPiece(CtsPlayPiece other) : this() {
      roomId_ = other.roomId_;
      chairId_ = other.chairId_;
      x_ = other.x_;
      y_ = other.y_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CtsPlayPiece Clone() {
      return new CtsPlayPiece(this);
    }

    /// <summary>Field number for the "roomId" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private long roomId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    /// <summary>Field number for the "chairId" field.</summary>
    public const int ChairIdFieldNumber = 2;
    private int chairId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairId {
      get { return chairId_; }
      set {
        chairId_ = value;
      }
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 3;
    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 4;
    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CtsPlayPiece);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CtsPlayPiece other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      if (ChairId != other.ChairId) return false;
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId != 0L) hash ^= RoomId.GetHashCode();
      if (ChairId != 0) hash ^= ChairId.GetHashCode();
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RoomId);
      }
      if (ChairId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ChairId);
      }
      if (X != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Y);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoomId);
      }
      if (ChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairId);
      }
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CtsPlayPiece other) {
      if (other == null) {
        return;
      }
      if (other.RoomId != 0L) {
        RoomId = other.RoomId;
      }
      if (other.ChairId != 0) {
        ChairId = other.ChairId;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomId = input.ReadInt64();
            break;
          }
          case 16: {
            ChairId = input.ReadInt32();
            break;
          }
          case 24: {
            X = input.ReadInt32();
            break;
          }
          case 32: {
            Y = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StcPlayPiece : pb::IMessage<StcPlayPiece> {
    private static readonly pb::MessageParser<StcPlayPiece> _parser = new pb::MessageParser<StcPlayPiece>(() => new StcPlayPiece());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StcPlayPiece> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.PlayPieceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StcPlayPiece() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StcPlayPiece(StcPlayPiece other) : this() {
      roomId_ = other.roomId_;
      chairId_ = other.chairId_;
      x_ = other.x_;
      y_ = other.y_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StcPlayPiece Clone() {
      return new StcPlayPiece(this);
    }

    /// <summary>Field number for the "roomId" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private long roomId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    /// <summary>Field number for the "chairId" field.</summary>
    public const int ChairIdFieldNumber = 2;
    private int chairId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairId {
      get { return chairId_; }
      set {
        chairId_ = value;
      }
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 3;
    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 4;
    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StcPlayPiece);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StcPlayPiece other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      if (ChairId != other.ChairId) return false;
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId != 0L) hash ^= RoomId.GetHashCode();
      if (ChairId != 0) hash ^= ChairId.GetHashCode();
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RoomId);
      }
      if (ChairId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ChairId);
      }
      if (X != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Y);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoomId);
      }
      if (ChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairId);
      }
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StcPlayPiece other) {
      if (other == null) {
        return;
      }
      if (other.RoomId != 0L) {
        RoomId = other.RoomId;
      }
      if (other.ChairId != 0) {
        ChairId = other.ChairId;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomId = input.ReadInt64();
            break;
          }
          case 16: {
            ChairId = input.ReadInt32();
            break;
          }
          case 24: {
            X = input.ReadInt32();
            break;
          }
          case 32: {
            Y = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StcGameResult : pb::IMessage<StcGameResult> {
    private static readonly pb::MessageParser<StcGameResult> _parser = new pb::MessageParser<StcGameResult>(() => new StcGameResult());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StcGameResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.PlayPieceReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StcGameResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StcGameResult(StcGameResult other) : this() {
      winner_ = other.winner_;
      looser_ = other.looser_;
      pieceList_ = other.pieceList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StcGameResult Clone() {
      return new StcGameResult(this);
    }

    /// <summary>Field number for the "winner" field.</summary>
    public const int WinnerFieldNumber = 1;
    private int winner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Winner {
      get { return winner_; }
      set {
        winner_ = value;
      }
    }

    /// <summary>Field number for the "looser" field.</summary>
    public const int LooserFieldNumber = 2;
    private int looser_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Looser {
      get { return looser_; }
      set {
        looser_ = value;
      }
    }

    /// <summary>Field number for the "pieceList" field.</summary>
    public const int PieceListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Pb.Piece> _repeated_pieceList_codec
        = pb::FieldCodec.ForMessage(26, global::Pb.Piece.Parser);
    private readonly pbc::RepeatedField<global::Pb.Piece> pieceList_ = new pbc::RepeatedField<global::Pb.Piece>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pb.Piece> PieceList {
      get { return pieceList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StcGameResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StcGameResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Winner != other.Winner) return false;
      if (Looser != other.Looser) return false;
      if(!pieceList_.Equals(other.pieceList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Winner != 0) hash ^= Winner.GetHashCode();
      if (Looser != 0) hash ^= Looser.GetHashCode();
      hash ^= pieceList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Winner != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Winner);
      }
      if (Looser != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Looser);
      }
      pieceList_.WriteTo(output, _repeated_pieceList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Winner != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Winner);
      }
      if (Looser != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Looser);
      }
      size += pieceList_.CalculateSize(_repeated_pieceList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StcGameResult other) {
      if (other == null) {
        return;
      }
      if (other.Winner != 0) {
        Winner = other.Winner;
      }
      if (other.Looser != 0) {
        Looser = other.Looser;
      }
      pieceList_.Add(other.pieceList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Winner = input.ReadInt32();
            break;
          }
          case 16: {
            Looser = input.ReadInt32();
            break;
          }
          case 26: {
            pieceList_.AddEntriesFrom(input, _repeated_pieceList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Piece : pb::IMessage<Piece> {
    private static readonly pb::MessageParser<Piece> _parser = new pb::MessageParser<Piece>(() => new Piece());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Piece> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.PlayPieceReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Piece() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Piece(Piece other) : this() {
      value_ = other.value_;
      x_ = other.x_;
      y_ = other.y_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Piece Clone() {
      return new Piece(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 2;
    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 3;
    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Piece);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Piece other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value != 0) hash ^= Value.GetHashCode();
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Value);
      }
      if (X != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Y);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Piece other) {
      if (other == null) {
        return;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Value = input.ReadInt32();
            break;
          }
          case 16: {
            X = input.ReadInt32();
            break;
          }
          case 24: {
            Y = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code

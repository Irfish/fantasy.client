// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Chat.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Pb {

  /// <summary>Holder for reflection information generated from Chat.proto</summary>
  public static partial class ChatReflection {

    #region Descriptor
    /// <summary>File descriptor for Chat.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ChatReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgpDaGF0LnByb3RvEgJwYiK6AQoEQ2hhdBIOCgZyb29tSWQYASABKAMSGgoE",
            "dHlwZRgCIAEoDjIMLnBiLkNoYXRUeXBlEgwKBHRpbWUYAyABKAMSDgoGdXNl",
            "cklkGAQgASgDEgwKBGhlYWQYBSABKAkSDAoEbmFtZRgGIAEoCRILCgNhY2MY",
            "ByABKAkSCwoDc3RyGAggASgJEhIKCnJlY3ZVc2VySWQYCSADKAMSEAoIZHVy",
            "YXRpb24YCiABKAUSDAoEZGF0YRgLIAEoDCImCgdDdHNDaGF0EhsKCWNvbnRh",
            "Y3RVcxgBIAEoCzIILnBiLkNoYXQiNgoHU3RjQ2hhdBIOCgZyZXN1bHQYASAB",
            "KAUSGwoJY29udGFjdFVzGAIgASgLMggucGIuQ2hhdCpHCghDaGF0VHlwZRIN",
            "CglDSEFUX05PTkUQABINCglDSEFUX1RFWFQQARINCglDSEFUX1RJTUUQAhIO",
            "CgpDSEFUX0lNQUdFEANiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Pb.ChatType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.Chat), global::Pb.Chat.Parser, new[]{ "RoomId", "Type", "Time", "UserId", "Head", "Name", "Acc", "Str", "RecvUserId", "Duration", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.CtsChat), global::Pb.CtsChat.Parser, new[]{ "ContactUs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.StcChat), global::Pb.StcChat.Parser, new[]{ "Result", "ContactUs" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum ChatType {
    [pbr::OriginalName("CHAT_NONE")] ChatNone = 0,
    [pbr::OriginalName("CHAT_TEXT")] ChatText = 1,
    [pbr::OriginalName("CHAT_TIME")] ChatTime = 2,
    [pbr::OriginalName("CHAT_IMAGE")] ChatImage = 3,
  }

  #endregion

  #region Messages
  public sealed partial class Chat : pb::IMessage<Chat> {
    private static readonly pb::MessageParser<Chat> _parser = new pb::MessageParser<Chat>(() => new Chat());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Chat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.ChatReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chat(Chat other) : this() {
      roomId_ = other.roomId_;
      type_ = other.type_;
      time_ = other.time_;
      userId_ = other.userId_;
      head_ = other.head_;
      name_ = other.name_;
      acc_ = other.acc_;
      str_ = other.str_;
      recvUserId_ = other.recvUserId_.Clone();
      duration_ = other.duration_;
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chat Clone() {
      return new Chat(this);
    }

    /// <summary>Field number for the "roomId" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private long roomId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Pb.ChatType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.ChatType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 3;
    private long time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 4;
    private long userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "head" field.</summary>
    public const int HeadFieldNumber = 5;
    private string head_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Head {
      get { return head_; }
      set {
        head_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 6;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "acc" field.</summary>
    public const int AccFieldNumber = 7;
    private string acc_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Acc {
      get { return acc_; }
      set {
        acc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "str" field.</summary>
    public const int StrFieldNumber = 8;
    private string str_ = "";
    /// <summary>
    /// 文本内容，图片地址，语音地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Str {
      get { return str_; }
      set {
        str_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "recvUserId" field.</summary>
    public const int RecvUserIdFieldNumber = 9;
    private static readonly pb::FieldCodec<long> _repeated_recvUserId_codec
        = pb::FieldCodec.ForInt64(74);
    private readonly pbc::RepeatedField<long> recvUserId_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> RecvUserId {
      get { return recvUserId_; }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 10;
    private int duration_;
    /// <summary>
    /// 语音时长
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 11;
    private pb::ByteString data_ = pb::ByteString.Empty;
    /// <summary>
    /// 图片内容，语音内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Chat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Chat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      if (Type != other.Type) return false;
      if (Time != other.Time) return false;
      if (UserId != other.UserId) return false;
      if (Head != other.Head) return false;
      if (Name != other.Name) return false;
      if (Acc != other.Acc) return false;
      if (Str != other.Str) return false;
      if(!recvUserId_.Equals(other.recvUserId_)) return false;
      if (Duration != other.Duration) return false;
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId != 0L) hash ^= RoomId.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Time != 0L) hash ^= Time.GetHashCode();
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (Head.Length != 0) hash ^= Head.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Acc.Length != 0) hash ^= Acc.GetHashCode();
      if (Str.Length != 0) hash ^= Str.GetHashCode();
      hash ^= recvUserId_.GetHashCode();
      if (Duration != 0) hash ^= Duration.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RoomId);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (Time != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Time);
      }
      if (UserId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(UserId);
      }
      if (Head.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Head);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Name);
      }
      if (Acc.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Acc);
      }
      if (Str.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Str);
      }
      recvUserId_.WriteTo(output, _repeated_recvUserId_codec);
      if (Duration != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Duration);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(90);
        output.WriteBytes(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoomId);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (Head.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Head);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Acc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Acc);
      }
      if (Str.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Str);
      }
      size += recvUserId_.CalculateSize(_repeated_recvUserId_codec);
      if (Duration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Duration);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Chat other) {
      if (other == null) {
        return;
      }
      if (other.RoomId != 0L) {
        RoomId = other.RoomId;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Time != 0L) {
        Time = other.Time;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.Head.Length != 0) {
        Head = other.Head;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Acc.Length != 0) {
        Acc = other.Acc;
      }
      if (other.Str.Length != 0) {
        Str = other.Str;
      }
      recvUserId_.Add(other.recvUserId_);
      if (other.Duration != 0) {
        Duration = other.Duration;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomId = input.ReadInt64();
            break;
          }
          case 16: {
            type_ = (global::Pb.ChatType) input.ReadEnum();
            break;
          }
          case 24: {
            Time = input.ReadInt64();
            break;
          }
          case 32: {
            UserId = input.ReadInt64();
            break;
          }
          case 42: {
            Head = input.ReadString();
            break;
          }
          case 50: {
            Name = input.ReadString();
            break;
          }
          case 58: {
            Acc = input.ReadString();
            break;
          }
          case 66: {
            Str = input.ReadString();
            break;
          }
          case 74:
          case 72: {
            recvUserId_.AddEntriesFrom(input, _repeated_recvUserId_codec);
            break;
          }
          case 80: {
            Duration = input.ReadInt32();
            break;
          }
          case 90: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CtsChat : pb::IMessage<CtsChat> {
    private static readonly pb::MessageParser<CtsChat> _parser = new pb::MessageParser<CtsChat>(() => new CtsChat());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CtsChat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.ChatReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CtsChat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CtsChat(CtsChat other) : this() {
      ContactUs = other.contactUs_ != null ? other.ContactUs.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CtsChat Clone() {
      return new CtsChat(this);
    }

    /// <summary>Field number for the "contactUs" field.</summary>
    public const int ContactUsFieldNumber = 1;
    private global::Pb.Chat contactUs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.Chat ContactUs {
      get { return contactUs_; }
      set {
        contactUs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CtsChat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CtsChat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ContactUs, other.ContactUs)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (contactUs_ != null) hash ^= ContactUs.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (contactUs_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ContactUs);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (contactUs_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ContactUs);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CtsChat other) {
      if (other == null) {
        return;
      }
      if (other.contactUs_ != null) {
        if (contactUs_ == null) {
          contactUs_ = new global::Pb.Chat();
        }
        ContactUs.MergeFrom(other.ContactUs);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (contactUs_ == null) {
              contactUs_ = new global::Pb.Chat();
            }
            input.ReadMessage(contactUs_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class StcChat : pb::IMessage<StcChat> {
    private static readonly pb::MessageParser<StcChat> _parser = new pb::MessageParser<StcChat>(() => new StcChat());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StcChat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.ChatReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StcChat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StcChat(StcChat other) : this() {
      result_ = other.result_;
      ContactUs = other.contactUs_ != null ? other.ContactUs.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StcChat Clone() {
      return new StcChat(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private int result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "contactUs" field.</summary>
    public const int ContactUsFieldNumber = 2;
    private global::Pb.Chat contactUs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.Chat ContactUs {
      get { return contactUs_; }
      set {
        contactUs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StcChat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StcChat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (!object.Equals(ContactUs, other.ContactUs)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      if (contactUs_ != null) hash ^= ContactUs.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Result);
      }
      if (contactUs_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ContactUs);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
      }
      if (contactUs_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ContactUs);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StcChat other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      if (other.contactUs_ != null) {
        if (contactUs_ == null) {
          contactUs_ = new global::Pb.Chat();
        }
        ContactUs.MergeFrom(other.ContactUs);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Result = input.ReadInt32();
            break;
          }
          case 18: {
            if (contactUs_ == null) {
              contactUs_ = new global::Pb.Chat();
            }
            input.ReadMessage(contactUs_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code

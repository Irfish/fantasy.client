// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user_ready.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Pb {

  /// <summary>Holder for reflection information generated from user_ready.proto</summary>
  public static partial class UserReadyReflection {

    #region Descriptor
    /// <summary>File descriptor for user_ready.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static UserReadyReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChB1c2VyX3JlYWR5LnByb3RvEgJwYiI/CgxDdHNVc2VyUmVhZHkSDgoGcm9v",
            "bUlkGAEgASgDEg8KB2NoYWlySWQYAiABKAUSDgoGc3RhdHVzGAMgASgIIj8K",
            "DFN0Y1VzZXJSZWFkeRIOCgZyb29tSWQYASABKAMSDwoHY2hhaXJJZBgCIAEo",
            "BRIOCgZzdGF0dXMYAyABKAhiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.CtsUserReady), global::Pb.CtsUserReady.Parser, new[]{ "RoomId", "ChairId", "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.StcUserReady), global::Pb.StcUserReady.Parser, new[]{ "RoomId", "ChairId", "Status" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class CtsUserReady : pb::IMessage<CtsUserReady> {
    private static readonly pb::MessageParser<CtsUserReady> _parser = new pb::MessageParser<CtsUserReady>(() => new CtsUserReady());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CtsUserReady> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.UserReadyReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CtsUserReady() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CtsUserReady(CtsUserReady other) : this() {
      roomId_ = other.roomId_;
      chairId_ = other.chairId_;
      status_ = other.status_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CtsUserReady Clone() {
      return new CtsUserReady(this);
    }

    /// <summary>Field number for the "roomId" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private long roomId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    /// <summary>Field number for the "chairId" field.</summary>
    public const int ChairIdFieldNumber = 2;
    private int chairId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairId {
      get { return chairId_; }
      set {
        chairId_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private bool status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CtsUserReady);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CtsUserReady other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      if (ChairId != other.ChairId) return false;
      if (Status != other.Status) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId != 0L) hash ^= RoomId.GetHashCode();
      if (ChairId != 0) hash ^= ChairId.GetHashCode();
      if (Status != false) hash ^= Status.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RoomId);
      }
      if (ChairId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ChairId);
      }
      if (Status != false) {
        output.WriteRawTag(24);
        output.WriteBool(Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoomId);
      }
      if (ChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairId);
      }
      if (Status != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CtsUserReady other) {
      if (other == null) {
        return;
      }
      if (other.RoomId != 0L) {
        RoomId = other.RoomId;
      }
      if (other.ChairId != 0) {
        ChairId = other.ChairId;
      }
      if (other.Status != false) {
        Status = other.Status;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomId = input.ReadInt64();
            break;
          }
          case 16: {
            ChairId = input.ReadInt32();
            break;
          }
          case 24: {
            Status = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StcUserReady : pb::IMessage<StcUserReady> {
    private static readonly pb::MessageParser<StcUserReady> _parser = new pb::MessageParser<StcUserReady>(() => new StcUserReady());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StcUserReady> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.UserReadyReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StcUserReady() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StcUserReady(StcUserReady other) : this() {
      roomId_ = other.roomId_;
      chairId_ = other.chairId_;
      status_ = other.status_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StcUserReady Clone() {
      return new StcUserReady(this);
    }

    /// <summary>Field number for the "roomId" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private long roomId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    /// <summary>Field number for the "chairId" field.</summary>
    public const int ChairIdFieldNumber = 2;
    private int chairId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairId {
      get { return chairId_; }
      set {
        chairId_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private bool status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StcUserReady);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StcUserReady other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      if (ChairId != other.ChairId) return false;
      if (Status != other.Status) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId != 0L) hash ^= RoomId.GetHashCode();
      if (ChairId != 0) hash ^= ChairId.GetHashCode();
      if (Status != false) hash ^= Status.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RoomId);
      }
      if (ChairId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ChairId);
      }
      if (Status != false) {
        output.WriteRawTag(24);
        output.WriteBool(Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoomId);
      }
      if (ChairId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairId);
      }
      if (Status != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StcUserReady other) {
      if (other == null) {
        return;
      }
      if (other.RoomId != 0L) {
        RoomId = other.RoomId;
      }
      if (other.ChairId != 0) {
        ChairId = other.ChairId;
      }
      if (other.Status != false) {
        Status = other.Status;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomId = input.ReadInt64();
            break;
          }
          case 16: {
            ChairId = input.ReadInt32();
            break;
          }
          case 24: {
            Status = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code

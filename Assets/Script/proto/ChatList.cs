// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChatList.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Pb {

  /// <summary>Holder for reflection information generated from ChatList.proto</summary>
  public static partial class ChatListReflection {

    #region Descriptor
    /// <summary>File descriptor for ChatList.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ChatListReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5DaGF0TGlzdC5wcm90bxICcGIiDQoLQ3RzQ2hhdExpc3QiPQoLU3RjQ2hh",
            "dExpc3QSDgoGcmVzdWx0GAEgASgFEh4KBGxpc3QYAiADKAsyEC5wYi5DaGF0",
            "TGlzdEl0ZW0ilwEKDENoYXRMaXN0SXRlbRIOCgZyb29tSWQYASABKAMSDgoG",
            "dXNlcklkGAIgASgDEhAKCHVzZXJIZWFkGAQgASgJEhAKCHVzZXJOYW1lGAUg",
            "ASgJEgsKA3N0chgGIAEoCRIMCgR0aW1lGAcgASgDEgwKBHR5cGUYCCABKAUS",
            "DAoEd2NJZBgJIAEoCRIMCgR3Y1FyGAogASgJYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.CtsChatList), global::Pb.CtsChatList.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.StcChatList), global::Pb.StcChatList.Parser, new[]{ "Result", "List" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.ChatListItem), global::Pb.ChatListItem.Parser, new[]{ "RoomId", "UserId", "UserHead", "UserName", "Str", "Time", "Type", "WcId", "WcQr" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class CtsChatList : pb::IMessage<CtsChatList> {
    private static readonly pb::MessageParser<CtsChatList> _parser = new pb::MessageParser<CtsChatList>(() => new CtsChatList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CtsChatList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.ChatListReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CtsChatList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CtsChatList(CtsChatList other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CtsChatList Clone() {
      return new CtsChatList(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CtsChatList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CtsChatList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CtsChatList other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class StcChatList : pb::IMessage<StcChatList> {
    private static readonly pb::MessageParser<StcChatList> _parser = new pb::MessageParser<StcChatList>(() => new StcChatList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StcChatList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.ChatListReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StcChatList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StcChatList(StcChatList other) : this() {
      result_ = other.result_;
      list_ = other.list_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StcChatList Clone() {
      return new StcChatList(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private int result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Pb.ChatListItem> _repeated_list_codec
        = pb::FieldCodec.ForMessage(18, global::Pb.ChatListItem.Parser);
    private readonly pbc::RepeatedField<global::Pb.ChatListItem> list_ = new pbc::RepeatedField<global::Pb.ChatListItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pb.ChatListItem> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StcChatList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StcChatList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if(!list_.Equals(other.list_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      hash ^= list_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Result);
      }
      list_.WriteTo(output, _repeated_list_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
      }
      size += list_.CalculateSize(_repeated_list_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StcChatList other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      list_.Add(other.list_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Result = input.ReadInt32();
            break;
          }
          case 18: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChatListItem : pb::IMessage<ChatListItem> {
    private static readonly pb::MessageParser<ChatListItem> _parser = new pb::MessageParser<ChatListItem>(() => new ChatListItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChatListItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.ChatListReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatListItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatListItem(ChatListItem other) : this() {
      roomId_ = other.roomId_;
      userId_ = other.userId_;
      userHead_ = other.userHead_;
      userName_ = other.userName_;
      str_ = other.str_;
      time_ = other.time_;
      type_ = other.type_;
      wcId_ = other.wcId_;
      wcQr_ = other.wcQr_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChatListItem Clone() {
      return new ChatListItem(this);
    }

    /// <summary>Field number for the "roomId" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private long roomId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 2;
    private long userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "userHead" field.</summary>
    public const int UserHeadFieldNumber = 4;
    private string userHead_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserHead {
      get { return userHead_; }
      set {
        userHead_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userName" field.</summary>
    public const int UserNameFieldNumber = 5;
    private string userName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "str" field.</summary>
    public const int StrFieldNumber = 6;
    private string str_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Str {
      get { return str_; }
      set {
        str_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 7;
    private long time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 8;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "wcId" field.</summary>
    public const int WcIdFieldNumber = 9;
    private string wcId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WcId {
      get { return wcId_; }
      set {
        wcId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "wcQr" field.</summary>
    public const int WcQrFieldNumber = 10;
    private string wcQr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WcQr {
      get { return wcQr_; }
      set {
        wcQr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChatListItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChatListItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      if (UserId != other.UserId) return false;
      if (UserHead != other.UserHead) return false;
      if (UserName != other.UserName) return false;
      if (Str != other.Str) return false;
      if (Time != other.Time) return false;
      if (Type != other.Type) return false;
      if (WcId != other.WcId) return false;
      if (WcQr != other.WcQr) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId != 0L) hash ^= RoomId.GetHashCode();
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (UserHead.Length != 0) hash ^= UserHead.GetHashCode();
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (Str.Length != 0) hash ^= Str.GetHashCode();
      if (Time != 0L) hash ^= Time.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (WcId.Length != 0) hash ^= WcId.GetHashCode();
      if (WcQr.Length != 0) hash ^= WcQr.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RoomId);
      }
      if (UserId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UserId);
      }
      if (UserHead.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(UserHead);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(UserName);
      }
      if (Str.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Str);
      }
      if (Time != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(Time);
      }
      if (Type != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Type);
      }
      if (WcId.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(WcId);
      }
      if (WcQr.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(WcQr);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoomId);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (UserHead.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserHead);
      }
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (Str.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Str);
      }
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (WcId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WcId);
      }
      if (WcQr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WcQr);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChatListItem other) {
      if (other == null) {
        return;
      }
      if (other.RoomId != 0L) {
        RoomId = other.RoomId;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.UserHead.Length != 0) {
        UserHead = other.UserHead;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.Str.Length != 0) {
        Str = other.Str;
      }
      if (other.Time != 0L) {
        Time = other.Time;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.WcId.Length != 0) {
        WcId = other.WcId;
      }
      if (other.WcQr.Length != 0) {
        WcQr = other.WcQr;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomId = input.ReadInt64();
            break;
          }
          case 16: {
            UserId = input.ReadInt64();
            break;
          }
          case 34: {
            UserHead = input.ReadString();
            break;
          }
          case 42: {
            UserName = input.ReadString();
            break;
          }
          case 50: {
            Str = input.ReadString();
            break;
          }
          case 56: {
            Time = input.ReadInt64();
            break;
          }
          case 64: {
            Type = input.ReadInt32();
            break;
          }
          case 74: {
            WcId = input.ReadString();
            break;
          }
          case 82: {
            WcQr = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Pb {

  /// <summary>Holder for reflection information generated from message.proto</summary>
  public static partial class MessageReflection {

    #region Descriptor
    /// <summary>File descriptor for message.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MessageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1tZXNzYWdlLnByb3RvEgJwYiKIAQoGSGVhZGVyEgoKAmlkGAEgASgFEg4K",
            "BnVzZXJJZBgCIAEoAxIRCglzZXNzaW9uSWQYAyABKAMSEgoKc2VydmljZUlk",
            "MBgEIAEoBRISCgpzZXJ2aWNlSWQxGAUgASgFEg0KBXRva2VuGAYgASgJEhgK",
            "EHRva2VuRXhwaXJlZFRpbWUYByABKAMiMwoHTWVzc2FnZRIaCgZoZWFkZXIY",
            "ASABKAsyCi5wYi5IZWFkZXISDAoEYm9keRgCIAEoDGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.Header), global::Pb.Header.Parser, new[]{ "Id", "UserId", "SessionId", "ServiceId0", "ServiceId1", "Token", "TokenExpiredTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.Message), global::Pb.Message.Parser, new[]{ "Header", "Body" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Header : pb::IMessage<Header> {
    private static readonly pb::MessageParser<Header> _parser = new pb::MessageParser<Header>(() => new Header());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Header> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.MessageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Header() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Header(Header other) : this() {
      id_ = other.id_;
      userId_ = other.userId_;
      sessionId_ = other.sessionId_;
      serviceId0_ = other.serviceId0_;
      serviceId1_ = other.serviceId1_;
      token_ = other.token_;
      tokenExpiredTime_ = other.tokenExpiredTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Header Clone() {
      return new Header(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 2;
    private long userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "sessionId" field.</summary>
    public const int SessionIdFieldNumber = 3;
    private long sessionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SessionId {
      get { return sessionId_; }
      set {
        sessionId_ = value;
      }
    }

    /// <summary>Field number for the "serviceId0" field.</summary>
    public const int ServiceId0FieldNumber = 4;
    private int serviceId0_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServiceId0 {
      get { return serviceId0_; }
      set {
        serviceId0_ = value;
      }
    }

    /// <summary>Field number for the "serviceId1" field.</summary>
    public const int ServiceId1FieldNumber = 5;
    private int serviceId1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServiceId1 {
      get { return serviceId1_; }
      set {
        serviceId1_ = value;
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 6;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tokenExpiredTime" field.</summary>
    public const int TokenExpiredTimeFieldNumber = 7;
    private long tokenExpiredTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TokenExpiredTime {
      get { return tokenExpiredTime_; }
      set {
        tokenExpiredTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Header);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Header other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (UserId != other.UserId) return false;
      if (SessionId != other.SessionId) return false;
      if (ServiceId0 != other.ServiceId0) return false;
      if (ServiceId1 != other.ServiceId1) return false;
      if (Token != other.Token) return false;
      if (TokenExpiredTime != other.TokenExpiredTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (SessionId != 0L) hash ^= SessionId.GetHashCode();
      if (ServiceId0 != 0) hash ^= ServiceId0.GetHashCode();
      if (ServiceId1 != 0) hash ^= ServiceId1.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (TokenExpiredTime != 0L) hash ^= TokenExpiredTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (UserId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UserId);
      }
      if (SessionId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(SessionId);
      }
      if (ServiceId0 != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ServiceId0);
      }
      if (ServiceId1 != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ServiceId1);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Token);
      }
      if (TokenExpiredTime != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(TokenExpiredTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (SessionId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SessionId);
      }
      if (ServiceId0 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServiceId0);
      }
      if (ServiceId1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServiceId1);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (TokenExpiredTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TokenExpiredTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Header other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.SessionId != 0L) {
        SessionId = other.SessionId;
      }
      if (other.ServiceId0 != 0) {
        ServiceId0 = other.ServiceId0;
      }
      if (other.ServiceId1 != 0) {
        ServiceId1 = other.ServiceId1;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.TokenExpiredTime != 0L) {
        TokenExpiredTime = other.TokenExpiredTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            UserId = input.ReadInt64();
            break;
          }
          case 24: {
            SessionId = input.ReadInt64();
            break;
          }
          case 32: {
            ServiceId0 = input.ReadInt32();
            break;
          }
          case 40: {
            ServiceId1 = input.ReadInt32();
            break;
          }
          case 50: {
            Token = input.ReadString();
            break;
          }
          case 56: {
            TokenExpiredTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Message : pb::IMessage<Message> {
    private static readonly pb::MessageParser<Message> _parser = new pb::MessageParser<Message>(() => new Message());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Message> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.MessageReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message(Message other) : this() {
      Header = other.header_ != null ? other.Header.Clone() : null;
      body_ = other.body_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message Clone() {
      return new Message(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Pb.Header header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "body" field.</summary>
    public const int BodyFieldNumber = 2;
    private pb::ByteString body_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Body {
      get { return body_; }
      set {
        body_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Message);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Message other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (Body != other.Body) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (Body.Length != 0) hash ^= Body.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (Body.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Body);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (Body.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Body);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Message other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          header_ = new global::Pb.Header();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.Body.Length != 0) {
        Body = other.Body;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (header_ == null) {
              header_ = new global::Pb.Header();
            }
            input.ReadMessage(header_);
            break;
          }
          case 18: {
            Body = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
